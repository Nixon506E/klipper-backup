[gcode_macro START_PRINT]
description: Slicer Start Print Replacement
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(20)|float %}

  G28 ; home all axis
  G90 ; absolute coordinates
  
  M104 S150 ; set temporary nozzle temp to prevent oozing during homing
  M140 S{BED_TEMP} ; set final bed temp
  G4 S30 ; allow partial nozzle warmup
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=6 ; generate new bed mesh
  #BED_MESH_PROFILE LOAD="default" ; load existing mesh
  
  SMART_PARK ; KAMP move final heating near print area
  #G1 Z10.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  
  M104 S{EXTRUDER_TEMP} ; set final nozzle temp
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
  #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP} ; wait for chamber temp

  LINE_PURGE ; KAMP smart purge
  #G92 E0 ; Reset Extruder
  #G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
  #G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
  #G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
  #G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
  #G92 E0 ; Reset Extruder
  #G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  #G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

[gcode_macro END_PRINT]
description: Slicer End Print Replacement
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}

  M140 S0 ; turn off bed
  M104 S0 ; turn off extruder
  M107 S0 ; turn off fan
  G91 ; relative movement
  G1 X+2 Y+2 E-3 F300 ; move nozzle away from print while retracting
  G1 Z10 F3000 ; raise nozzle by 10mm
  G90 ; absolute movement
  G1 X{x_park} Y{y_park} F6000 ; go to x and y park
  M84 X Y E ; Disable all steppers but Z

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
variable_temp_target: 0
gcode:
  ##### set extrude temperature variable before timeout #####
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=temp_target VALUE={printer[printer.toolhead.extruder].target|float}
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### set extruder back to the previous print temp, and wait #####
  G109 S{printer["gcode_macro PAUSE"].temp_target|default(205)|float}
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro FILAMENT_RUNOUT]
description: Pause the print due to end of filament
gcode:
  {% set x_offset = 147 %} #approximate x location of the runout sensor
  {% set y_offset = 154 %} #approximate y location of the runout sensor
  {% set z_offset = 250 %} #approximate z location of the runout sensor
  
  {% set current_z = printer.toolhead.position.z %}
  
  {% set distance = ((x_offset - current_x)**2 + (y_offset - current_y)**2 + (z_offset - current_z)**2)**(1/2) %}

  PAUSE_AFTER_D D={distance} # Pause print after most of remaining filament is extruded
  NOTIFY_FILAMENT_CHANGE

[gcode_macro FILAMENT_INSERT]
description: Resume the print once filament is reloaded
gcode:
  G4 P150000 ; pause for 15 seconds
  RESUME

[gcode_macro PAUSE_AFTER_DISTANCE]
description: Trigger to pause the print after a further 'd' mm has been extruded
variable_end_distance: 0 #create variable "END_DISTANCE" which is associated with the PAUSE_AFTER_DISTANCE gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_DISTANCE is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_DISTANCE VARIABLE=end_distance VALUE={d_end} #write the end value to the END_DISTANCE gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_DISTANCE"].end_distance|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_DISTANCE]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_DISTANCE"].end_distance %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_DISTANCE"].end_distance|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    PAUSE
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}

[gcode_macro M0]
description: Unconditional Pause
gcode:
  PAUSE

[gcode_macro POWER_OFF_PRINTER]
description: Turn off power to printer
gcode:
  {action_call_remote_method(
    "set_device_power", device="Printer", state="off"
  )}

[gcode_macro NOTIFY_FILAMENT_CHANGE]
gcode:
  {action_call_remote_method("notify",
                             name="pushover_notifier",
                             message="Filament change needed!"
  )}

[gcode_macro M600]
description: Starts process of Filament Change
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    PAUSE
    _DISABLE_FS
    UNLOAD_FILAMENT
  {% endif %}

[gcode_macro FC_RESUME]
description: Resume print after Filament Change
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    SET_IDLE_TIMEOUT TIMEOUT={ 10 * 60 }
    G1 E-{ E }
    # Reset extruder position
    G92 E0
    RESUME

[gcode_macro UNLOAD_FILAMENT]
description: Unloads Filament from extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}

    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
    
    G91                   # relative positioning
    G0 Z{ z_safe_lift }
    G92 E0                # Reset extruder position
    G1 E5.0 F300          # extrude a little
    G1 E-50 F{ 10 * 60 }  # perform the unload
    G1 E-50 F{ 5 * 60 }   # finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_state
  {% endif %}

[gcode_macro PURGE]
description: Extrudes filament, used to clean out previous filament
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
  {% set PURGE_AMOUNT = params.PURGE_AMOUNT|default(40)|float %}
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                   # relative coords
    G1 E{PURGE_AMOUNT} F{ 5 * 60 }  # purge
    RESTORE_GCODE_STATE NAME=PURGE_state
  {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=LOAD_state
    G91                   # Relative coords
    G1 E50 F{ 5 * 60 }    # extrude
    G4 P{ 0.9 * 1000 }    # dwell (ms)
    G1 E25.0 F{ 5 * 60 }  # extrude a little more
    _ENABLE_FS
    RESTORE_GCODE_STATE NAME=LOAD_state
  {% endif %}

[gcode_macro _DISABLE_FS]
description: placeholder, disables filament sensor that might trigger an M600 in the middle of a load/unload/M600...
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=0

[gcode_macro _ENABLE_FS]
description: placeholder, enables filament sensor
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=1

[gcode_macro HEAT]
description: Heats up the extruder to get ready for Filament Change
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set Z = params.Z|default(50)|float %}
  {% set X = params.X|default(110)|float %}
  {% set Y = params.Y|default(110)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  HOME_CHECK
  G1 Z{Z} F500
  G1 X{X} Y{Y} F6000

[gcode_macro COOL]
description: Turns off all heaters
gcode:
  TURN_OFF_HEATERS

[gcode_macro PREHEAT_PLA]
description: Preheats extruder and bed for PLA printing, extruder set to 150 to prevent filament leaking while homing etc
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

[gcode_macro START_BED_TRAMMING]
description: Heats bed and starts process to level the bed with the screws
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %} 
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  HOME_CHECK
  M190 S{BED_TEMP}
  SCREWS_TILT_CALCULATE

[gcode_macro CONTINUE_BED_TRAMMING]
description: Continues the bed screw leveling process
gcode:
  SCREWS_TILT_CALCULATE

[gcode_macro BED_MESH]
description: Heats bed, makes a mesh and saves it
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %} 
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  HOME_CHECK
  M190 S{BED_TEMP}
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro MAP_BED]
description: Show bed mesh in console
gcode:
  BED_MESH_MAP

[gcode_macro DISABLE_STEPPERS]
description: Disables the printers stepper motors
gcode:
  M84 X Y E

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(200)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro NOZZLE_MID]
description: Moves nozzle to the center of the bed
gcode:
  {% set Z = params.Z|default(10)|float %}
  HOME_CHECK
  G1 Z{Z} F500
  G1 X110 Y110 F6000

[gcode_macro HOME_CHECK]
description: Checks if the printer is homed, it not it homes the printer
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}

[gcode_macro SHOW_PRINT]
description: Moves the extruder out of the way and bed forward
gcode:
    HOME_CHECK
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}

    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
    G1 Z{ z_safe_lift }
    G1 X10 Y220 F4000

[gcode_macro ZOffset_Setup]
description: Starts Z-Offset Calibration, under 30 degrees Celsius
gcode:
  {% if printer.heater_bed.temperature > 30 %}
    {action_respond_info("Bed temperature too high")}
  {% elif printer.extruder.temperature > 30 %}
    {action_respond_info("Extruder temperature too High")}
  {% else %}
  G28
  PROBE_CALIBRATE
  {% endif %}

[gcode_macro Z_Down_01]
description: Moves Z down by 0.1
gcode:
  TESTZ Z=-.1

[gcode_macro Z_Up_01]
description: Moves Z up by 0.1
gcode:
  TESTZ Z=+.1

[gcode_macro Z_Low_Half]
description: Sets Z between current value and previous lower value
gcode:
  TESTZ Z=-

[gcode_macro Z_High_Half]
description: Sets Z between current value and previous higher value
gcode:
  TESTZ Z=+

[gcode_macro ADJUST_SCREWS]
description: Adjust bed screws
gcode:
  BED_SCREWS_ADJUST

[gcode_macro SAVE]
description: Accepts the Z-Offset and saves the config
gcode:
  SAVE_CONFIG

[gcode_macro ABORT_SETUP]
description: Aborts the Z-Offset calibration
gcode:
  ABORT